plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {

    forge {
        mixinConfig "fossils_delight.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    "mappings"(loom.layered {
        officialMojangMappings() {
            nameSyntheticMembers = true
        }
    })
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_api_version}"

    compileOnly annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1")
    implementation "io.github.llamalad7:mixinextras-forge:0.4.1"
    modImplementation "curse.maven:terrablender-563928:3957976"
    modImplementation "curse.maven:more-hitboxes-1115989:6203359"
    modImplementation "curse.maven:geckolib-388172:4181370"
    modImplementation "curse.maven:fossils-223908:6204261"
    modImplementation "curse.maven:farmers-delight-398521:4679315"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
